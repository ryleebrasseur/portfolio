# PR Validation Workflow
# Runs on all pull requests to ensure code quality and build integrity
name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  # Enable Turbo Remote Caching
  TURBO_REMOTE_CACHE_ENABLED: true

jobs:
  # Detect what files changed to optimize CI runs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.filter.outputs.apps }}
      packages: ${{ steps.filter.outputs.packages }}
      root: ${{ steps.filter.outputs.root }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            apps:
              - 'apps/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
            packages:
              - 'packages/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
            root:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
              - '.github/**'
              - 'scripts/**'

  # Quick format and lint checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Needed for changeset

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        run: pnpm format:check

      - name: Lint code
        run: pnpm lint:ci

      - name: Type check
        run: pnpm typecheck

      # TODO: Add dependency-cruiser checks here
      # - name: Check architecture constraints
      #   run: pnpm depcruise

  # Build and test matrix
  test:
    name: Test (${{ matrix.os }}, Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.apps == 'true' || needs.changes.outputs.packages == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: ['20.17.0']
        include:
          # Add Windows and macOS for main branch only
          - os: windows-latest
            node: '20.17.0'
            experimental: true
          - os: macos-latest
            node: '20.17.0'
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-${{ matrix.node }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node }}-pnpm-store-

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-${{ matrix.node }}-turbo-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node }}-turbo-test-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm turbo run build --filter='./packages/*'

      - name: Run unit tests
        run: pnpm test:unit -- --coverage

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20.17.0'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unit
          fail_ci_if_error: false

  # E2E tests run separately
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-e2e-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-e2e-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %LOCALAPPDATA%\ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Build applications
        run: pnpm build

      - name: Run E2E tests
        run: pnpm test:e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/*/playwright-report/
          retention-days: 7

      - name: Upload test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos
          path: apps/*/test-results/
          retention-days: 3

  # Build all apps
  build:
    name: Build Apps
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true' || needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-build-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-build-

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-build-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all
        run: pnpm build

      - name: Check build artifacts
        run: |
          # Verify build outputs exist
          for app in apps/*/; do
            if [ -d "$app/dist" ]; then
              echo "âœ“ Built $app"
              ls -la "$app/dist"
            fi
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: apps/*/dist/
          retention-days: 1

      # TODO: Add bundle size checks here
      # - name: Check bundle sizes
      #   run: pnpm size-limit

      # TODO: Add Lighthouse CI here
      # - name: Run Lighthouse CI
      #   run: pnpm lhci autorun

  # Required status check
  pr-status:
    name: PR Status
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, build]
    if: always()
    steps:
      - name: Check status
        if: >
          needs.quality.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.e2e.result == 'failure' ||
          needs.build.result == 'failure'
        run: exit 1

      - name: Success
        run: echo "All checks passed!"

      # TODO: Add PR comment with build stats
      # - name: Comment PR
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       // Add build time, bundle size, coverage info
