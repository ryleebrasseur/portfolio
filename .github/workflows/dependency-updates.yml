# Dependency Updates Workflow
# Manages automated dependency updates using Renovate
name: Dependency Updates

on:
  # Run weekly on Monday mornings
  schedule:
    - cron: '0 9 * * 1'
  # Allow manual runs
  workflow_dispatch:
  # Run on Renovate config changes
  push:
    paths:
      - '.github/renovate.json'
      - '.github/workflows/dependency-updates.yml'

jobs:
  # Validate Renovate configuration
  validate:
    name: Validate Config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Renovate config
        uses: suzuki-shunsuke/github-action-renovate-config-validator@v1.0.1
        with:
          config_file_path: .github/renovate.json

  # Check for security vulnerabilities
  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-audit-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-audit-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          # Run pnpm audit
          pnpm audit --audit-level=moderate || true

          # Generate audit report
          pnpm audit --json > audit-report.json || true

      - name: Check for critical vulnerabilities
        run: |
          # Check if there are any critical vulnerabilities
          CRITICAL=$(jq '.advisories | to_entries | map(select(.value.severity == "critical")) | length' audit-report.json)
          HIGH=$(jq '.advisories | to_entries | map(select(.value.severity == "high")) | length' audit-report.json)

          echo "Found $CRITICAL critical and $HIGH high severity vulnerabilities"

          if [ "$CRITICAL" -gt 0 ]; then
            echo "Critical vulnerabilities found!"
            exit 1
          fi

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 30

  # Run Renovate
  renovate:
    name: Run Renovate
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Self-hosted Renovate
        uses: renovatebot/github-action@v40.3.2
        with:
          configurationFile: .github/renovate.json
          token: ${{ secrets.RENOVATE_TOKEN }}
        env:
          LOG_LEVEL: debug
          # TODO: Configure these secrets in repository settings
          # RENOVATE_REPOSITORIES: ${{ github.repository }}

  # Check outdated dependencies
  outdated-check:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check outdated packages
        run: |
          echo "## Outdated Dependencies Report" > outdated-report.md
          echo "" >> outdated-report.md
          echo "Generated on: $(date)" >> outdated-report.md
          echo "" >> outdated-report.md

          # List outdated packages
          pnpm outdated --format json > outdated.json || true

          # Parse and format the report
          node -e "
          const fs = require('fs');
          const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));

          let report = '### Summary\n\n';
          report += '| Package | Current | Wanted | Latest | Type |\n';
          report += '|---------|---------|--------|--------|------|\n';

          for (const [name, info] of Object.entries(outdated)) {
            report += \`| \${name} | \${info.current} | \${info.wanted} | \${info.latest} | \${info.dependencyType} |\n\`;
          }

          fs.appendFileSync('outdated-report.md', report);
          "

      - name: Upload outdated report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies-report
          path: outdated-report.md
          retention-days: 7

      - name: Comment PR with outdated info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('outdated-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: pnpm add -g license-checker

      - name: Check licenses
        run: |
          # Generate license report
          license-checker --production --json > licenses.json

          # Check for problematic licenses
          node -e "
          const licenses = require('./licenses.json');
          const prohibited = ['GPL', 'AGPL', 'LGPL', 'SSPL'];
          const issues = [];

          for (const [pkg, info] of Object.entries(licenses)) {
            if (prohibited.some(p => info.licenses?.includes(p))) {
              issues.push(\`\${pkg}: \${info.licenses}\`);
            }
          }

          if (issues.length > 0) {
            console.error('Found packages with prohibited licenses:');
            issues.forEach(i => console.error(i));
            process.exit(1);
          }

          console.log('All licenses are compliant!');
          "

      - name: Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 30

  # Notify about updates
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [security-check, outdated-check]
    if: always()
    steps:
      - name: Prepare notification
        run: |
          echo "Dependency update check completed"
          echo "Security check: ${{ needs.security-check.result }}"
          echo "Outdated check: ${{ needs.outdated-check.result }}"

      - name: Send Slack notification
        if: needs.security-check.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Security vulnerabilities found in dependencies!",
              attachments: [{
                color: 'danger',
                text: 'Critical security issues detected. Please review immediately.'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true
