# Release Automation Workflow
# Manages releases using changesets
name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  # Check if there are changesets to release
  check-changesets:
    name: Check for Changesets
    runs-on: ubuntu-latest
    outputs:
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changesets
        id: changesets
        run: |
          # Check if there are any changesets
          if [ -n "$(ls -A .changeset 2>/dev/null | grep -v README.md | grep -v config.json)" ]; then
            echo "hasChangesets=true" >> $GITHUB_OUTPUT
          else
            echo "hasChangesets=false" >> $GITHUB_OUTPUT
          fi

  # Create release PR or publish
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: check-changesets
    if: needs.check-changesets.outputs.hasChangesets == 'true'
    permissions:
      contents: write
      pull-requests: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-release-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-release-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Release PR or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm changeset publish
          version: pnpm changeset version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Sync lockfile if needed
        if: steps.changesets.outputs.pullRequestNumber
        run: |
          pnpm install --lockfile-only
          git add pnpm-lock.yaml
          git commit -m "chore: update lockfile" || true
          git push

  # Tag and create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release notes
        id: notes
        run: |
          # Extract release notes from CHANGELOG.md
          # TODO: Implement changelog parsing
          echo "Release notes would be extracted here"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.publishedPackages[0].version }}
          name: Release ${{ needs.release.outputs.publishedPackages[0].version }}
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: false
          generate_release_notes: true

  # Deploy released versions
  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [release, github-release]
    if: needs.release.outputs.published == 'true'
    strategy:
      matrix:
        app: [rylee-brasseur]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we're on the main branch with the new version

      - name: Trigger deployment
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: deploy.yml
          token: ${{ secrets.GITHUB_TOKEN }}
          inputs: '{"environment": "production", "app": "${{ matrix.app }}"}'

  # Notify about release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, deploy-release]
    if: always() && needs.release.outputs.published == 'true'
    steps:
      - name: Prepare notification
        id: notification
        run: |
          echo "packages=${{ needs.release.outputs.publishedPackages }}" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "New release published!",
              attachments: [{
                color: 'good',
                fields: [
                  {
                    title: 'Version',
                    value: '${{ steps.notification.outputs.packages }}',
                    short: true
                  },
                  {
                    title: 'Status',
                    value: '${{ needs.deploy-release.result }}',
                    short: true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 'Release Published'
          description: |
            Version: ${{ steps.notification.outputs.packages }}
            Deployment: ${{ needs.deploy-release.result }}
          color: 0x00ff00
        continue-on-error: true
